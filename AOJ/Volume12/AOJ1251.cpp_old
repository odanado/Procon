#include <algorithm>
#include <functional>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <string>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <vector>
#include <list>
#include <stack>
#include <queue>
#include <map>
#include <set>
#include <bitset>
#include <climits>

#define all(c) (c).begin(), (c).end()
#define rep(i,n) for(int i=0;i<(n);i++)
#define pb(e) push_back(e)
#define mp(a, b) make_pair(a, b)
#define fr first
#define sc second

const int INF=100000000;
int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};
using namespace std;
typedef pair<int ,int > P;
typedef long long ll;

vector<string> split(const string &s, char delim) {
    vector<string> elems;
    stringstream ss(s);
    string item;
    while (getline(ss, item, delim)) {
        if (!item.empty()) {
            elems.push_back(item);
        }
    }
    return elems;
}

vector<string> get_path(const string &s) {
    vector<string> tmp=split(s,'/');
    if(s[s.size()-1]!='/') {
        if(tmp[tmp.size()-1]=="index.html") {
            tmp.erase(--tmp.end());
        }
    }

    return tmp;
}

bool same_path(vector<string> &path1,vector<string> &path2) {
    if(path1.size()!=path2.size()) return false;
    bool ret=true;
    rep(i,path1.size()) {
        ret&=path1[i]==path2[i];
    }
    return ret;
}

bool has_path(vector<vector<string>> &paths,vector<string> &path) {
    rep(i,paths.size()) {
        if(same_path(paths[i],path)) return true;
    }

    return false;
}

void show(vector<string> &path) {
    for(auto &e : path) cout<<e<<", ";
    cout<<endl;
}

void fix(vector<string> &path) {
    auto it=path.begin();
    while(it!=path.end()) {
        if(*it==".") it=path.erase(it);
        it++;
    }
    if(path.size()==1&&path[0]=="") {
        path=vector<string>();
        return;
    }
    it=path.begin();
    while(it!=path.end()) {
        if(*it=="..") {
            --it;
            it=path.erase(it);
            it=path.erase(it);
        }
       ++it;
    }
}

int N,M;

void solve() {
    vector<vector<string> > paths;
    rep(i,N) {
        string s;
        cin>>s;
        paths.pb(get_path(s));
    }
    rep(i,M) {
        string s1,s2;
        cin>>s1>>s2;
        vector<string> path1(get_path(s1));
        vector<string> path2(get_path(s2));
        fix(path1);
        fix(path2);
        if(!has_path(paths,path1) || !has_path(paths,path2)) {
            cout<<"not found"<<endl;
        }
        else if(same_path(path1,path2)) {
            cout<<"yes"<<endl;
        }
        else cout<<"no"<<endl;
    }

}

int main() {
    while(cin>>N>>M) {
        if(N+M==0) break;
        solve();
    }
    return 0;
}

